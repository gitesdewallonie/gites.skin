package be.affinitic.gites {	// --	import flash.display.MovieClip;	import flash.text.TextField;	import flash.display.Sprite;	import flash.net.NetConnection;	import flash.net.Responder;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.utils.getTimer;	import flash.ui.Mouse;	import flash.utils.Timer;	import flash.filters.BitmapFilter;	import flash.filters.BitmapFilterQuality;	import flash.filters.BlurFilter;	import flash.events.Event;		// --	import fl.controls.CheckBox;	import fl.controls.ComboBox;	import fl.transitions.Tween;	import fl.transitions.TweenEvent;	import fl.transitions.easing.*;		// -- 	import flash.net.navigateToURL;	import flash.net.URLRequest;	import flash.net.URLVariables;	import flash.events.TimerEvent;	import flash.external.ExternalInterface;	public class Application extends MovieClip 	{		// -- 		//private var serverURL : String = "http://gdw.affinitic.be/portal_flash/@@connectAMF";		//		private var serverURL : String="http://10.0.2.10:8080/plone/portal_flash/@@connectAMF";		private var serverURL : String;		// -- 			private var done : Boolean = true;		private var gites : Array;		private var xMap : Number;		private var yMap : Number;		private var initMapY : Number;		private var initMapX : Number;		private var initHolderX : Number;		private var initHolderY : Number;		private var t1 : Number;		private var t2 : Number;		private var info : InfoBulle;		private var infoChambre : InfoBulleChambre;		private var infoBulleTourisme : InfoBulleTourisme;		private var infoBullePratique : InfoBullePratique;		private var gitesArray : Array;		private var chambresArray : Array;		private var pratiquesArray : Array;		private var tourismesArray : Array;		private var panActivated : Boolean;		private	var touristiqueLbl : CheckBox;		private var _bulle : *;		//----------------------------------------		private var externalLat : String;		private var externalLon : String;		private var language : String;		private const centerX : Number = 467;		private const cenerY : Number = 274;		//----------------------------------------		private var _endDbCall : Boolean;		private var externalPk : Number;		public function Application() 		{			/*FLASH VARS*/				var parms : Object = loaderInfo.parameters;			// --			_endDbCall = false;			//			externalLat = parms.externalLat;			externalLon = parms.externalLon;			externalPk = parms.externalPk;//			serverURL = "http://192.168.10.1:6080/plone1";			serverURL = parms.externalURL;			var externalLanguage : String = parms.externalLanguage;			(externalLanguage != undefined) ? language = externalLanguage : language = "fr";			trace(this + " is created");			gitesArray = [];			chambresArray = [];			pratiquesArray = [];			tourismesArray = [];			done = false;			this.loaderInfo.addEventListener(Event.INIT, init);					}		private function init(e : Event)		{				initView();			callPlone();		}		public function callPlone() : void 		{									var responder : Responder = new Responder(onResultat, onErreur);			var responder2 : Responder = new Responder(onResultat2, onErreur);			var responder3 : Responder = new Responder(onResultat3, onErreur);			var responder4 : Responder = new Responder(onResultat4, onErreur);			// --gites et chambres			var connexion : NetConnection = new NetConnection();			connexion.connect(serverURL);			//connexion.call("Psycopg_database_connection", responder, "query:select heb_pk, type_heb_code, type_heb_nom,heb_gps_long,heb_gps_lat,heb_cgt_cap_max,heb_localite,heb_cgt_cap_min,heb_nom from hebergement, type_heb where type_heb_pk=heb_typeheb_fk");			connexion.call("getHebergements", responder);			// -- info pratique			var connexion2 : NetConnection = new NetConnection();			connexion2.connect(serverURL);			connexion2.call("getInfosPratiques", responder2)//			//			// -- info touristique			var connexion3 : NetConnection = new NetConnection();			connexion3.connect(serverURL);			connexion3.call("getInfosTouristiques", responder3);//			//			// -- tourisme			var connexion4 : NetConnection = new NetConnection();			connexion4.connect(serverURL);			connexion4.call("getMaisonsDuTourisme", responder4);		}		private function initView() : void 		{									// --			info = new InfoBulle();			infoChambre = new InfoBulleChambre();			infoBulleTourisme = new InfoBulleTourisme();			infoBullePratique = new InfoBullePratique();			// -- 			panActivated = false;						// --			initMapX = screen.map.x;			initMapY = screen.map.y;						initHolderX = screen.map.gitesHolder.x;			initHolderY = screen.map.gitesHolder.y;			var villesLbl : CheckBox = new CheckBox();			villesLbl.label = I18nUtils[language + "_ville"];			//"Villes";			villesLbl.name = "Villes";			villesLbl.width = 150;			villesLbl.x = 10;			villesLbl.y = 400;			villesLbl.addEventListener(MouseEvent.CLICK, changeView);			villesLbl.selected = true;			addChild(villesLbl);			var eauLbl : CheckBox = new CheckBox();			eauLbl.label = I18nUtils[language + "_eau"];			// "Voies fluviales";			eauLbl.name = "Voies fluviales"			eauLbl.width = 150;			eauLbl.x = 10;			eauLbl.y = 420;			eauLbl.addEventListener(MouseEvent.CLICK, changeView);			eauLbl.selected = true;			addChild(eauLbl);			var provincesLbl : CheckBox = new CheckBox();			provincesLbl.label = I18nUtils[language + "_province"];			// "Provinces";			provincesLbl.name = "Provinces";			provincesLbl.width = 150;			provincesLbl.x = 10;			provincesLbl.y = 440;			provincesLbl.addEventListener(MouseEvent.CLICK, changeView);			provincesLbl.selected = true;			addChild(provincesLbl);			var routesLbl : CheckBox = new CheckBox();			routesLbl.label = I18nUtils[language + "_routes"];			//"Routes";			routesLbl.name = "Routes";			routesLbl.width = 150;			routesLbl.x = 10;			routesLbl.y = 460;			routesLbl.addEventListener(MouseEvent.CLICK, changeView);			routesLbl.selected = true;			addChild(routesLbl);						var chambreLbl : CheckBox = new CheckBox();			chambreLbl.label = I18nUtils[language + "_chambre"];			// "Chambres";			chambreLbl.name = "Chambres";			chambreLbl.width = 150;			chambreLbl.x = 10;			chambreLbl.y = 360;			chambreLbl.addEventListener(MouseEvent.CLICK, changeView);			chambreLbl.selected = true;			addChild(chambreLbl);						var giteLbl : CheckBox = new CheckBox();			giteLbl.label = I18nUtils[language + "_gite"];			//"Gites";			giteLbl.name = "Gites";			giteLbl.width = 150;			giteLbl.x = 10;			giteLbl.y = 340;			giteLbl.addEventListener(MouseEvent.CLICK, changeView);			giteLbl.selected = true;			addChild(giteLbl);			var pratiqueLbl : CheckBox = new CheckBox();			pratiqueLbl.label = I18nUtils[language + "_info"];			//"Infos Pratiques";			pratiqueLbl.name = "Infos Pratiques";			pratiqueLbl.x = 10;			pratiqueLbl.y = 490;			pratiqueLbl.width = 150;			pratiqueLbl.addEventListener(MouseEvent.CLICK, changeView);			pratiqueLbl.selected = false;			addChild(pratiqueLbl);						touristiqueLbl = new CheckBox();			touristiqueLbl.label = I18nUtils[language + "_tourisme"];			// "Infos Touristique";			touristiqueLbl.name = "Infos Touristique";			touristiqueLbl.width = 150;			touristiqueLbl.x = 10;			touristiqueLbl.y = 510;			touristiqueLbl.addEventListener(MouseEvent.CLICK, changeView);			touristiqueLbl.selected = false;			addChild(touristiqueLbl);			// --			bZoom.addEventListener(MouseEvent.CLICK, _activateZoomPlus);			bZoomNega.addEventListener(MouseEvent.CLICK, _activateZoomMoins);			bReset.addEventListener(MouseEvent.CLICK, _resetMap);			_ActivatePanMap();		}		private function _scaleObjects(coefficient : Number) : void 		{			for each(var item0 in gitesArray) 			{				item0.scaleX = coefficient;				item0.scaleY = coefficient;			}			for each(var item1 in chambresArray) 			{				item1.scaleX = coefficient;				item1.scaleY = coefficient;			}			for each(var item2 in pratiquesArray) 			{				item2.scaleX = coefficient;				item2.scaleY = coefficient;			}			for each(var item3 in tourismesArray) 			{				item3.scaleX = coefficient;				item3.scaleY = coefficient;			}		}		private function _activateZoomPlus(e : MouseEvent) : void 		{			if(!done) 			{				done = true;			}			if(screen.scaleX < 4 || screen.scaleY < 4 ) 			{								var scaleXTween : Tween = new Tween(screen, "scaleX", None.easeNone, screen.scaleX, screen.scaleX * 2, .5, true);				var scaleYTween : Tween = new Tween(screen, "scaleY", None.easeNone, screen.scaleY, screen.scaleY * 2, .5, true);				if(screen.scaleX == 2)_scaleObjects(.2);			} else if(screen.scaleX == 4) 			{				screen.map.tourismeHolder.visible = true;				touristiqueLbl.selected = true;				var scaleXTween : Tween = new Tween(screen, "scaleX", None.easeNone, screen.scaleX, screen.scaleX * 2, .5, true);				var scaleYTween : Tween = new Tween(screen, "scaleY", None.easeNone, screen.scaleY, screen.scaleY * 2, .5, true);				_scaleObjects(.1);			}		}		private function _activateZoomMoins(e : MouseEvent) : void 		{				if(screen.scaleX >= 2 || screen.scaleY >= 2 ) 			{				var scaleXTween : Tween = new Tween(screen, "scaleX", None.easeNone, screen.scaleX, screen.scaleX / 2, .5, true);				var scaleYTween : Tween = new Tween(screen, "scaleY", None.easeNone, screen.scaleY, screen.scaleY / 2, .5, true);				_scaleObjects(.3);			}		}		private function _verifyScale(e : TweenEvent) : void 		{			if (screen.scaleX <= 1) 			{				var xTween : Tween = new Tween(screen.map, "x", None.easeNone, screen.map.x, initMapX, 1, true);				var yTween : Tween = new Tween(screen.map, "y", None.easeNone, screen.map.y, initMapY, 1, true);				var scaleXTween : Tween = new Tween(screen, "scaleX", None.easeNone, screen.scaleX, 1, 1, true);				var scaleYTween : Tween = new Tween(screen, "scaleY", None.easeNone, screen.scaleY, 1, 1, true);			}		}		private function _resetMap(e : MouseEvent) : void 		{			_scaleObjects(.3);			var xTween : Tween = new Tween(screen.map, "x", None.easeNone, screen.map.x, initMapX, 1, true);			var yTween : Tween = new Tween(screen.map, "y", None.easeNone, screen.map.y, initMapY, 1, true);			var scaleXTween : Tween = new Tween(screen, "scaleX", None.easeNone, screen.scaleX, 1, 1, true);			var scaleYTween : Tween = new Tween(screen, "scaleY", None.easeNone, screen.scaleY, 1, 1, true);		}		private function changeView(e : MouseEvent) : void 		{			//debugText.text=e.target.name;			switch (e.target.name) 			{				case "Villes" :					screen.map.villes.visible = !screen.map.villes.visible;					break;				case "Voies fluviales" :					screen.map.eau.visible = !screen.map.eau.visible;					break;				case "Provinces" :					screen.map.provinces.visible = !screen.map.provinces.visible;					break;				case "Routes" :					screen.map.routes.visible = !screen.map.routes.visible;					break;				case "Chambres" :					screen.map.chambresHolder.visible = !screen.map.chambresHolder.visible;					break;				case "Gites" :					screen.map.gitesHolder.visible = !screen.map.gitesHolder.visible;					break;				case "Infos Pratiques" :					screen.map.infoHolder.visible = !screen.map.infoHolder.visible;					break;				case "Infos Touristique" :					screen.map.tourismeHolder.visible = !screen.map.tourismeHolder.visible;					break;				default :					break;			}		}		private function onResultat(o : *) : void 		{			var dao : Object = o;			var tempLength : Number = (dao.length);			for( var i : Number = 0;i < tempLength;i++) 			{				if(i == tempLength - 1)_endDbCall = true;				placeGite({lat:dao[i].heb_gps_long, long:dao[i].heb_gps_lat, title:dao[i].heb_nom, qt:dao[i].heb_cgt_cap_max, pk:dao[i].heb_pk, type:dao[i].type_heb_code, localite:dao[i].heb_localite, minQt:dao[i].heb_cgt_cap_min});				//placeGite({lat:dao.initialData[i][3], long:dao.initialData[i][4], title:dao.initialData[i][8], qt:dao.initialData[i][5], pk:dao.initialData[i][0], type:dao.initialData[i][1], localite:dao.initialData[i][6], minQt:dao.initialData[i][7]});			}		}		private function onResultat2(o : Object) : void 		{						var dao : Object = o;			var tempLength : Number = (dao.length);						for( var i : Number = 0;i < tempLength;i++) 			{								placeInfo({lat:dao[i].infoprat_gps_long, long:dao[i].infoprat_gps_lat, title:dao[i].infoprat_nom, url:dao[i].infoprat_url, type:dao[i].typinfoprat_nom_fr, localite:dao[i].infoprat_localite});			}			}		private function onResultat3(o : Object) : void 		{			var dao : Object = o;						var tempLength : Number = (dao.length);					for( var i : Number = 0;i < tempLength;i++) 			{				placeTourisme({lat:dao[i].infotour_gps_long, long:dao[i].infotour_gps_lat, title:dao[i].infotour_nom, url:dao[i].infotour_url, type:dao[i].typinfotour_nom_fr, localite:dao[i].infotour_localite});			}		}		private function onResultat4(o : Object) : void 		{			for( var z in o[0])			{				trace(z +":"+o[0][z]);			}			var dao : Object = o;			var tempLength : Number = (dao.length);			trace("---------------------------------------------------------------------------");			for( var i : Number = 0;i < tempLength;i++) 			{									placeTourisme({lat:dao[i].mais_gps_long, long:dao[i].mais_gps_lat, title:dao[i].mais_nom, url:dao[i].mais_url, type:"maisonTouristique"});			}		}		private function onErreur(e:*) : void 		{			for(var z in e)			{				trace(z+":"+e[z]);			}		}		private function _ActivatePanMap() : void 		{						screen.map.addEventListener(MouseEvent.MOUSE_DOWN, _dragMap);			stage.addEventListener(MouseEvent.MOUSE_UP, _dropMap);		}		private function _dragMap(e : MouseEvent) : void 		{			screen.map.startDrag();			screen.map.addEventListener(MouseEvent.MOUSE_MOVE, _moveMap);		}		private function _dropMap(e : MouseEvent) : void 		{			screen.map.stopDrag();			screen.map.removeEventListener(MouseEvent.MOUSE_MOVE, _moveMap);		}		private function _moveMap(e : MouseEvent) : void 		{			e.updateAfterEvent();		}		private function placeGite(pointToGo : Object) : void 		{			var o : Object = (CoordsUtils.detectIntersectCircle(new Point(PointList.ORIGINPOINT.xPx, PointList.ORIGINPOINT.yPx), new Point(PointList.ORIGINPOINT2.xPx, PointList.ORIGINPOINT2.yPx), CoordsUtils.calculateDistance(pointToGo, PointList.ORIGINPOINT), CoordsUtils.calculateDistance(pointToGo, PointList.ORIGINPOINT2)));			var point1 : Point = CoordsUtils.getGoodPoint(pointToGo, PointList.ORIGINPOINT3, o);			if(pointToGo.type == "CH" || pointToGo.type == "MH" || pointToGo.type == "CHECR") 			{				var chambre : * = new Chambre();				chambre.x = point1.x;				chambre.y = point1.y;				chambre.scaleX = 0.3;				chambre.scaleY = 0.3;				chambre.localite = pointToGo.localite;				chambre.title = (pointToGo.title);				chambre.qt = pointToGo.qt;				chambre.pk = pointToGo.pk;				chambre.minQt = pointToGo.minQt;				chambre.addEventListener(MouseEvent.MOUSE_OVER, _showInfoChambre);				chambre.addEventListener(MouseEvent.MOUSE_OUT, _hideInfoChambre);				chambre.addEventListener(MouseEvent.CLICK, _goToGite);				chambresArray.push(chambre);				screen.map.chambresHolder.addChild(chambre);			}			else 			{				var gite : * = new Gite();				gite.x = point1.x;				gite.y = point1.y;				gite.scaleX = 0.3;				gite.scaleY = 0.3;				gite.localite = pointToGo.localite;				gite.title = (pointToGo.title);				gite.qt = pointToGo.qt;				gite.pk = pointToGo.pk;				gite.minQt = pointToGo.minQt;				gite.addEventListener(MouseEvent.MOUSE_OVER, _showInfoGite);				gite.addEventListener(MouseEvent.MOUSE_OUT, _hideInfoGite);				gite.addEventListener(MouseEvent.CLICK, _goToGite);				gitesArray.push(gite);				screen.map.gitesHolder.addChild(gite);			}			if(_endDbCall) 			{				if(externalLat != undefined && externalLon != undefined) 				{					var goExtTimer : Timer = new Timer(2000, 1);					goExtTimer.addEventListener(TimerEvent.TIMER, goExtTimerHandler);					goExtTimer.start();				}			}		}		private function placeInfo(pointToGo : Object) : void 		{			var o : Object = (CoordsUtils.detectIntersectCircle(new Point(PointList.ORIGINPOINT.xPx, PointList.ORIGINPOINT.yPx), new Point(PointList.ORIGINPOINT2.xPx, PointList.ORIGINPOINT2.yPx), CoordsUtils.calculateDistance(pointToGo, PointList.ORIGINPOINT), CoordsUtils.calculateDistance(pointToGo, PointList.ORIGINPOINT2)));			var point1 : Point = CoordsUtils.getGoodPoint(pointToGo, PointList.ORIGINPOINT3, o);			var infoPoint : * = new InfoPoint();			infoPoint.x = point1.x;			infoPoint.y = point1.y;			infoPoint.scaleX = .3;			infoPoint.scaleY = .3;			infoPoint.url = pointToGo.url;			(pointToGo.title != undefined) ? infoPoint.title = pointToGo.title : infoPoint.title = "manque titre";			(pointToGo.localite != undefined) ? infoPoint.localite = pointToGo.localite : infoPoint.localite = "manque DB";			infoPoint.type = pointToGo.type;			infoPoint.gotoAndStop(pointToGo.type);			infoPoint.addEventListener(MouseEvent.MOUSE_OVER, _showInfoPratique);			infoPoint.addEventListener(MouseEvent.MOUSE_OUT, _hideInfoPratique);			infoPoint.addEventListener(MouseEvent.CLICK, _goToUrl);			pratiquesArray.push(infoPoint);			screen.map.infoHolder.addChild(infoPoint);			screen.map.infoHolder.visible = false;		}		private function placeTourisme(pointToGo : Object) : void 		{									var o : Object = (CoordsUtils.detectIntersectCircle(new Point(PointList.ORIGINPOINT.xPx, PointList.ORIGINPOINT.yPx), new Point(PointList.ORIGINPOINT2.xPx, PointList.ORIGINPOINT2.yPx), CoordsUtils.calculateDistance(pointToGo, PointList.ORIGINPOINT), CoordsUtils.calculateDistance(pointToGo, PointList.ORIGINPOINT2)));			var point1 : Point = CoordsUtils.getGoodPoint(pointToGo, PointList.ORIGINPOINT3, o);			var infoTourisme : * = new InfoTourisme();			infoTourisme.x = point1.x;			infoTourisme.y = point1.y;			infoTourisme.scaleX = .3;			infoTourisme.scaleY = .3;			infoTourisme.gotoAndStop(pointToGo.type);			infoTourisme.url = pointToGo.url;			(pointToGo.title != undefined || pointToGo.title != "" ) ? infoTourisme.title = pointToGo.title : infoTourisme.title = "";			(pointToGo.localite != undefined) ? infoTourisme.localite = pointToGo.localite : infoTourisme.localite = "";			infoTourisme.type = pointToGo.type;			infoTourisme.addEventListener(MouseEvent.MOUSE_OVER, _showInfoTourisme);			infoTourisme.addEventListener(MouseEvent.MOUSE_OUT, _hideInfoTourisme);			infoTourisme.addEventListener(MouseEvent.CLICK, _goToUrl);			tourismesArray.push(infoTourisme);			screen.map.tourismeHolder.addChild(infoTourisme);			//	stage.invalidate();			screen.map.tourismeHolder.visible = false;		}		private function goExtTimerHandler(e : TimerEvent) : void		{			goToExtCoords(Number(externalLat), Number(externalLon), Number(externalPk));				}		private function _showInfoGite(e : MouseEvent) : void 		{						// --			info.x = e.stageX;			info.y = e.stageY;			if(e.stageY < 60)			{				info.maxTxt.y=49;				info.localiteTxt.y=30.1;				info.titleTxt.y=69.4;				info.gotoAndStop(2);							} else 			{				info.maxTxt.y=-31;				info.localiteTxt.y=-49.8;				info.titleTxt.y=-10.6;				info.gotoAndStop(1);			}			// --			info.maxTxt.text = e.target.minQt + "/" + e.target.qt;			info.localiteTxt.text = e.target.localite;			info.titleTxt.text = e.target.title						// --			_bulle = info;						// --			addChild(info);		}		private function _hideInfoGite(e : MouseEvent) : void 		{			removeChild(info);		}		private function _showInfoChambre(e : MouseEvent) : void 		{						// --			infoChambre.x = e.stageX;			infoChambre.y = e.stageY;			if(e.stageY < 60)			{				infoChambre.maxTxt.y=49;				infoChambre.localiteTxt.y=30.1;				infoChambre.titleTxt.y=69.4;				infoChambre.gotoAndStop(2);							} else 			{				infoChambre.maxTxt.y=-31;				infoChambre.localiteTxt.y=-49.8;				infoChambre.titleTxt.y=-10.6;				infoChambre.gotoAndStop(1);			}						infoChambre.maxTxt.text = e.target.minQt + "/" + e.target.qt;			infoChambre.localiteTxt.text = e.target.localite;			infoChambre.titleTxt.text = e.target.title						// --			_bulle = infoChambre;						// --			addChild(infoChambre);		}		private function _hideInfoChambre(e : MouseEvent) : void 		{			removeChild(infoChambre);		}		private function _showInfoTourisme(e : MouseEvent) : void 		{			// --			infoBulleTourisme.x = e.stageX;				infoBulleTourisme.y = e.stageY;			// --			trace("_____tourismeIn");			infoBulleTourisme.communeTxt.text = e.target.localite;			if(e.target.title != undefined)infoBulleTourisme.titleTxt.text = e.target.title;			// --			_bulle = infoBulleTourisme;						// --			addChild(infoBulleTourisme);		}		private function _hideInfoTourisme(e : MouseEvent) : void 		{			trace("_____tourismeOut");			removeChild(infoBulleTourisme);		}		private function _showInfoPratique(e : MouseEvent) : void 		{			for (var z in e.target) 			{				trace(z + ":" + e.target[z]);			}			// --			infoBullePratique.x = e.stageX;				infoBullePratique.y = e.stageY;			// --			infoBullePratique.communeTxt.text = e.target.localite;			infoBullePratique.titleTxt.text = e.target.title;			// --			_bulle = infoBullePratique;						// --			addChild(infoBullePratique);		}		private function _hideInfoPratique(e : MouseEvent) : void 		{			removeChild(infoBullePratique);		}		private function _goToGite(e : MouseEvent) : void 		{						var _pk : Number = e.target.pk;			remoteGetURL(_pk);		}		private function _goToUrl(e : MouseEvent) : void 		{			var url : String = "http://" + e.target.url;			var request : URLRequest = new URLRequest(url);			try 			{            				navigateToURL(request, "_BLANK");			}            catch (e : Error) 			{                // handle error here			}		}		public function goToExtCoords(latI : Number,longI : Number,pk : Number) : void 		{			var debuTesxt : TextField = new TextField();			debuTesxt.multiline = true;			addChild(debuTesxt);			//trace(latI);			var pointToGo : Object = {lat:latI, long:longI};			var o : Object = (CoordsUtils.detectIntersectCircle(new Point(PointList.ORIGINPOINT.xPx, PointList.ORIGINPOINT.yPx), new Point(PointList.ORIGINPOINT2.xPx, PointList.ORIGINPOINT2.yPx), CoordsUtils.calculateDistance(pointToGo, PointList.ORIGINPOINT), CoordsUtils.calculateDistance(pointToGo, PointList.ORIGINPOINT2)));			var point1 : Point = CoordsUtils.getGoodPoint(pointToGo, PointList.ORIGINPOINT3, o);			screen.map.x += 467 - point1.x;			screen.map.y += 274 - point1.y;			screen.scaleX = 4;			screen.scaleY = 4;						// -- call for highLight			highLight(externalPk);						var myTimer : Timer = new Timer(100, 10);			myTimer.addEventListener(TimerEvent.TIMER, timeScale);			myTimer.start();		}		private function highLight(extPk : Number) : void		{			var length : int = ((screen.map.gitesHolder as MovieClip).numChildren)			for (var i : Number = 0;i < length; i++) 			{				if( screen.map.gitesHolder.getChildAt(i) is Gite ) 				{					if(screen.map.gitesHolder.getChildAt(i).pk == extPk)					{						trace(screen.map.gitesHolder.getChildAt(i).highLightMC.visible);						screen.map.gitesHolder.getChildAt(i).highLightMC.visible = true;						break;					}				}			}						var length : int = ((screen.map.chambresHolder as MovieClip).numChildren)			for (var i : Number = 0;i < length; i++) 			{				if( screen.map.chambresHolder.getChildAt(i) is Chambre ) 				{					trace(screen.map.chambresHolder.getChildAt(i).pk);															if(screen.map.chambresHolder.getChildAt(i).pk == extPk)					{						trace(screen.map.chambresHolder.getChildAt(i).pk);						screen.map.chambresHolder.getChildAt(i).highLightMC.visible = true;						break;					}				}			}		}		private function timeScale(e : TimerEvent) : void 		{			_scaleObjects(.1);		}		private function remoteGetURL(pk : Number) : void		{			trace(pk + "__");			var responder : Responder = new Responder(onRemoteGetURLHandler, onErreur);			var connexion : NetConnection = new NetConnection();			connexion.connect(serverURL);			connexion.call("getHebergementUrl", responder, pk);			}		private function onRemoteGetURLHandler(o : String) : void 		{						trace(o + "_____");			var url : String = o;			var request : URLRequest = new URLRequest(url);				try 			{            				navigateToURL(request, "_SELF");			}            catch (e : Error) 			{                // handle error here			}		}	}}